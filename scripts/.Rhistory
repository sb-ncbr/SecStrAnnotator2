setALL %>% select('UniProt', 'Domain') %>% distinct() %>% arrange(Domain) %>% group_by(UniProt) %>% summarize(n_domains = length(Domain), Domains = paste(Domain, collapse=',')) %>% View()
domainsALL = setALL %>% select('UniProt', 'Domain') %>% distinct() %>% arrange(Domain)
%>% group_by(UniProt) %>% summarize(n_domains = length(Domain), Domains = paste(Domain, collapse=','))
domainsALL = setALL %>% select('UniProt', 'Domain') %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(n_domains = length(Domain), Domains = paste(Domain, collapse=','))
View(domainsALL)
View(domainsALL)
domainsALL = setALL %>% select('UniProt', 'Domain') %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','))
domainsALL = setALL %>% select('UniProt', 'Domain', 'Group') %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','))
domainsALL = setALL %>% select('UniProt') %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','))
domainsALL = setALL %>% select('UniProt', 'Domain', 'Group') %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=',')) %>% View()
domainsALL = setALL %>% select('UniProt', 'Domain') %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=',')) %>% View()
domainsALL = setALL %>% select('UniProt', 'Domain', 'Group') %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','))
??select
help('select')
domainsALL = setALL %>% select('UniProt', 'Domain', matches('Group')) %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','))
View(domainsALL)
View(domainsALL)
setNR = left_join(add_lengths(setNR), taxons, by='Domain') %>% filter(label %in% our_sses)
source('R_lib.R')
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR = read_sses_json_new(full_path('annotations_with_reference_residues_NR.json'), c('start','end','type'))
setNR = left_join(add_sse_lengths(setNR), taxons, by='Domain') %>% filter(label %in% OUR_SSES)
setNR = setNR %>% select(-starts_with("longest_"), -starts_with("bonds_"))
domainsALL = setALL %>% select('UniProt', 'Domain', matches('Group')) %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','))
View(domainsALL)
View(domainsALL)
View(domainsALL)
View(domainsALL)
setALL = read_sses_json_new(full_path('annotations_with_reference_residues_ALL.json'), c('start','end','type'), one_domain_per_pdb=TRUE)
setALL = left_join(add_sse_lengths(setALL), taxons, by='Domain') %>% filter(label %in% OUR_SSES)
domainsALL = setALL %>% select('UniProt', 'Domain', matches('Group')) %>% distinct() %>% arrange(Domain) %>%
group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','))
View(setALL)
setALL %>% select('UniProt', 'Domain', matches('Group')) %>% distinct() %>% View()
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR = read_sses_json_new(full_path('annotations_with_reference_residues_NR.json'), c('start','end','type'))
setNR %>% select('UniProt', 'Domain', matches('Group')) %>% distinct() %>% View()
setALL %>% select('UniProt', 'Domain', matches('Group')) %>% distinct() %>% View()
setALL %>% select('UniProt', 'Domain', matches('Gr')) %>% distinct() %>% View()
setALL %>% select('UniProt', 'Domain', matches('^Gr$')) %>% distinct() %>% View()
setALL %>% select('UniProt', 'Domain', matches('^Group$')) %>% distinct() %>% View()
setNR %>% select('UniProt', 'Domain', matches('^Group$')) %>% distinct() %>% View()
setALL %>% select('UniProt', 'Domain', matches('^Group$')) %>% distinct() %>% arrange(Domain) %>% group_by(UniProt) %>% View()
setALL %>% select('UniProt', 'Domain', matches('^Group$')) %>% distinct() %>% arrange(Domain) %>% group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=',')) %>% View()
setALL %>% select('UniProt', 'Domain', matches('^Group$')) %>% distinct() %>% arrange(Domain) %>% group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','), Group=Group) %>% View()
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
setALL %>% select('UniProt', 'Domain', matches('^Group$')) %>% distinct() %>% arrange(Domain) %>% group_by(UniProt) %>% summarize(Count = length(Domain), Domains = paste(Domain, collapse=','), Group=Group) %>% View()
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL)
View(domainsNR)
left_join(domainsNR, taxons, by='Domain')
domainsNR = get_domains(setNR) %>% rename(Domain=Domains)
domainsNR = get_domains(setNR) %>% rename(Domain=Domains) %>% select(-'Count')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
domainsNR = get_domains(setNR)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
help(arange)
help(arrange)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
domainsNR = get_domains(setNR)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt')
View(domains_combined)
View(domains_combined)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons)
dALL = read_sses_json_new(full_path('annotations_with_reference_residues_ALL.json'), c('start'), one_domain_per_pdb=TRUE, only_domain_lists=TRUE)
dNR = read_sses_json_new(full_path('annotations_with_reference_residues_NR.json'), c('start'), one_domain_per_pdb=TRUE, only_domain_lists=TRUE)
dCombined = dNR %>%
transmute(UniProt=UniProt, Domain=Domains) %>%
left_join(taxons,by="Domain") %>%
left_join(dALL, by="UniProt") %>%
transmute(Group=Group, UniProt=UniProt, SetNR=Domain, CountInSetALL=Count, SetALL=Domains) %>%
arrange(Group, UniProt)
View(dCombined)
View(dCombined)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group=Group, UniProt=UniProt, SetNR=Domain, SetALL_count=Count, SetALL=Domains)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group=Group, UniProt=UniProt, SetNR=Domain, SetALL_count=Count, SetALL=Domains) %>% arrange(Group)
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group = Group, UniProt = UniProt, SetNR = Domain, SetALL_count = Count, SetALL = Domains) %>% arrange(Group)
write.table(domains_combined, file = full_path('plots/domain_lists_table.tsv'), quote = FALSE, sep = '\t', row.names = FALSE)
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR1= read_tsv(full_path('annotations_with_reference_residues_NR.json'))
install.packages("readr")
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR1= read_tsv(full_path('annotations_with_reference_residues_NR.tsv'))
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR1= read_tsv(full_path('annotations_with_reference_residues_NR.tsv'))
View(setNR1)
summary(setNR1)
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv'))
setNR = left_join(setNR, taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% select(-starts_with('longest_'), -starts_with('bonds_'))
View(setNR)
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% select(-starts_with('longest_'), -starts_with('bonds_'))
setALL
setNR %>% View()
setNR %>% group_by(UniProt) %>% mutate(first=dplyr::first(Domain)) %>% View()
setNR %>% group_by(UniProt) %>% mutate(first=dplyr::first(length)) %>% View()
setNR %>% group_by(UniProt) %>% summarize(first=dplyr::first(length)) %>% View()
setNR %>% group_by(UniProt) %>% summarize(first=dplyr::first(length)) %>% View()
setNR %>% group_by(UniProt) %>% summarize(first=dplyr::first(Domain)) %>% View()
setNR %>% group_by(UniProt) %>% summarize(Domain=first(Domain)) %>% View()
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
View(setALL)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group = Group, UniProt = UniProt, SetNR = Domain, SetALL_count = Count, SetALL = Domains) %>% arrange(Group)
write.table(domains_combined, file = full_path('plots/domain_lists_table.tsv'), quote = FALSE, sep = '\t', row.names = FALSE)
write_tsv(domains_combined, full_path('plots/domain_lists_table2.tsv'))
write_tsv(domains_combined, full_path('plots/domain_lists_table2.tsv'))
write_tsv(domains_combined, full_path('plots/domain_lists_table.tsv'))
barplot(table((setNR %>% distinct(PDB, Group))$Group), main='Number of PDB entries in superkingdoms (Set-NR)')
table((setNR %>% distinct(PDB, Group))$Group)
table((setNR %>% distinct(PDB, Group))$Group)
barplot(table((setNR %>% distinct(PDB, Group))$Group), main='Number of PDB entries in superkingdoms (Set-NR)')
DATADIR = '/home/adam/Workspace/C#/SecStrAnnot2_data/SecStrAPI/testing_20200128-verbose'
source('R_lib.R')
dir.create(full_path('plots'), showWarnings = FALSE)
# Read  SSEs
taxons = read.csv(full_path('domain_taxons_groups.tsv'), sep='\t', header = FALSE, col.names=c('Domain','TaxID','Group'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group = Group, UniProt = UniProt, SetNR = Domain, SetALL_count = Count, SetALL = Domains) %>% arrange(Group)
write_tsv(domains_combined, full_path('plots/domain_lists_table.tsv'))
table((setNR %>% distinct(PDB, Group))$Group)
barplot(table((setNR %>% distinct(PDB, Group))$Group), main='Number of PDB entries in superkingdoms (Set-NR)')
sCAM = setALL %>% filter(UniProt=='P00183')
sBM3 = setALL %>% filter(UniProt=='P14779')
s3A4 = setALL %>% filter(UniProt=='P08684')
View(sCAM)
# Compare results obtained by different methods
diff = compare_annotations(setNR, setNR)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# Compare results obtained by different methods
diff = compare_annotations(setNR, setNR)
View(diff)
View(diff)
View(setNR)
# Compare results obtained by different methods
diff = compare_annotations(setNR, setCAM)
setCAM = setALL %>% filter(UniProt=='P00183')
setBM3 = setALL %>% filter(UniProt=='P14779')
set3A4 = setALL %>% filter(UniProt=='P08684')
# Compare results obtained by different methods
diff = compare_annotations(setNR, setCAM)
View(diff)
View(diff)
# Plots for occurrence
occurrence_table_NR = table_sse_occurrence(setNR, alpha=0.05)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# Plots for occurrence
occurrence_table_NR = table_sse_occurrence(setNR, alpha=0.05)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# Plots for occurrence
occurrence_table_NR = table_sse_occurrence(setNR, alpha=0.05)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# Plots for occurrence
occurrence_table_NR = table_sse_occurrence(setNR, alpha=0.05)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# Plots for occurrence
occurrence_table_NR = table_sse_occurrence(setNR, alpha=0.05)
View(occurrence_table_NR)
# Plots for occurrence
occurrence_table_NR = table_sse_occurrence(setNR, alpha=0.05)
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width=4000, ratio=2/1, res=400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05, turn_labels=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width=4000, ratio=2/1, res=400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05, turn_labels=TRUE)
expand_scale()
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width=4000, ratio=2/1, res=400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05, turn_labels=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width=4000, ratio=2/1, res=400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05, turn_labels=TRUE)
help(expansion)
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width=4000, ratio=2/1, res=400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05, turn_labels=TRUE)
print_png(full_path('plots/occurrence-setNR-500t.png'), width=4000, ratio=2/1, res=500)
print_tif(full_path('plots/occurrence-setNR-500t.tif'), width=4000, ratio=2/1, res=500)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width=4000, ratio=2/1, res=400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha=0.05, turn_labels=TRUE)
print_png(full_path('plots/occurrence-setNR-500t.png'), width=4000, ratio=2/1, res=500)
print_tif(full_path('plots/occurrence-setNR-500t.tif'), width=4000, ratio=2/1, res=500)
# plot_compare_sse_occurrence(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_compare_sse_occurrence(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
setNR_Bact = filter(setNR, Group=='Bact')
setNR_Euka = filter(setNR, Group=='Euka')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse_lengths(setNR, ignore_zero=TRUE, turn_labels=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse_lengths(setNR, ignore_zero=TRUE, turn_labels=TRUE)
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse(setNR, length, ignore_zero=TRUE, turn_labels=TRUE)
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse(setNR, 'length', ignore_zero=TRUE, turn_labels=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse(setNR, 'length', ignore_zero=TRUE, turn_labels=TRUE)
violinplot_sse(setNR, 'length', ignore_zero = TRUE)
print_png(full_path('plots/length-setNR.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse(setNR, 'length', ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
violinplot_sse(setNR, 'length', ignore_zero = TRUE, stagger_labels = TRUE)
print_png(full_path('plots/length-setNR-500s.png'), width = 4000, ratio = 2/1, res = 500)
violinplot_sse(setNR, y_column = 'length', ignore_zero = TRUE)
print_png(full_path('plots/length-setNR.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse(setNR, ignore_zero = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
violinplot_sse(setNR, ignore_zero = TRUE)
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, ignore_zero = TRUE, title = 'Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# violinplot_sse_multi('Bact'=setNR_Bact, 'Euka'=setNR_Euka, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR-Bact-Euka.png'), width=4000, ratio=2/1, res=400)
violinplot_sse_multi('Bact'=setNR_Bact, 'Euka'=setNR_Euka, ignore_zero=TRUE, turn_labels=TRUE)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, stagger_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500s.png'), width = 4000, ratio = 2/1, res = 500)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length>0)
setNR_Euka_nonzero = filter(setNR_Euka, length>0)
two_sample_occurrence_prop.test(setNR_Bact, setNR_Euka, p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit=0.05, print_all=TRUE)
two_sample_occurrence_fisher.test(setNR_Bact, setNR_Euka, p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
help(fisher.test)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length > 0)
setNR_Euka_nonzero = filter(setNR_Euka, length > 0)
View(setNR_Euka_nonzero)
View(setNR_Euka_nonzero)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact, setNR_Euka, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
summary(setNR_Bact)
summary(setNR_Bact_nonzero)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
View(setNR_Euka)
View(setNR_Euka)
# READ DATASETS
taxons = read.csv(full_path('domain_taxons_groups.tsv'), sep='\t', header = FALSE, col.names=c('Domain','TaxID','Group'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
setNR_Bact = filter(setNR, Group=='Bact')
setNR_Euka = filter(setNR, Group=='Euka')
View(setNR)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length > 0)
setNR_Euka_nonzero = filter(setNR_Euka, length > 0)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
q()
DATADIR = '/home/adam/Workspace/C#/SecStrAnnot2_data/SecStrAPI/testing_20200128-verbose'
source('R_lib.R')
dir.create(full_path('plots'), showWarnings = FALSE)
# READ DATASETS
taxons = read.csv(full_path('domain_taxons_groups.tsv'), sep='\t', header = FALSE, col.names=c('Domain','TaxID','Group'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
setNR_Bact = filter(setNR, Group=='Bact')
setNR_Euka = filter(setNR, Group=='Euka')
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group = Group, UniProt = UniProt, SetNR = Domain, SetALL_count = Count, SetALL = Domains) %>% arrange(Group)
write_tsv(domains_combined, full_path('plots/domain_lists_table.tsv'))
table((setNR %>% distinct(PDB, Group))$Group)
barplot(table((setNR %>% distinct(PDB, Group))$Group), main = 'Number of PDB entries in superkingdoms (Set-NR)')
View(domainsALL)
View(domainsALL)
View(domainsNR)
View(domains_combined)
View(setNR_Bact)
# PLOTS FOR OCCURRENCE
occurrence_table_NR = table_sse_occurrence(setNR, alpha = 0.05)
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, ignore_zero = TRUE, title = 'Set-NR')
# violinplot_sse(setNR, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse(setNR, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
# violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length > 0)
setNR_Euka_nonzero = filter(setNR_Euka, length > 0)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
q()
