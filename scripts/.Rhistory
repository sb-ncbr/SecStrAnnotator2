print_png(full_path('plots/occurrence-setNR-500t.png'), width=4000, ratio=2/1, res=500)
print_tif(full_path('plots/occurrence-setNR-500t.tif'), width=4000, ratio=2/1, res=500)
# plot_compare_sse_occurrence(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_compare_sse_occurrence(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
setNR_Bact = filter(setNR, Group=='Bact')
setNR_Euka = filter(setNR, Group=='Euka')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, y_column='length', ignore_zero=TRUE, title='Set-NR')
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse_lengths(setNR, ignore_zero=TRUE, turn_labels=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse_lengths(setNR, ignore_zero=TRUE, turn_labels=TRUE)
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse(setNR, length, ignore_zero=TRUE, turn_labels=TRUE)
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse(setNR, 'length', ignore_zero=TRUE, turn_labels=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# violinplot_sse_lengths(setNR, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR.png'), width=4000, ratio=2/1, res=400)
violinplot_sse(setNR, 'length', ignore_zero=TRUE, turn_labels=TRUE)
violinplot_sse(setNR, 'length', ignore_zero = TRUE)
print_png(full_path('plots/length-setNR.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse(setNR, 'length', ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
violinplot_sse(setNR, 'length', ignore_zero = TRUE, stagger_labels = TRUE)
print_png(full_path('plots/length-setNR-500s.png'), width = 4000, ratio = 2/1, res = 500)
violinplot_sse(setNR, y_column = 'length', ignore_zero = TRUE)
print_png(full_path('plots/length-setNR.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse(setNR, ignore_zero = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
violinplot_sse(setNR, ignore_zero = TRUE)
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, ignore_zero = TRUE, title = 'Set-NR')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# violinplot_sse_multi('Bact'=setNR_Bact, 'Euka'=setNR_Euka, ignore_zero=TRUE)
# print_png(full_path('plots/length-setNR-Bact-Euka.png'), width=4000, ratio=2/1, res=400)
violinplot_sse_multi('Bact'=setNR_Bact, 'Euka'=setNR_Euka, ignore_zero=TRUE, turn_labels=TRUE)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, stagger_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500s.png'), width = 4000, ratio = 2/1, res = 500)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length>0)
setNR_Euka_nonzero = filter(setNR_Euka, length>0)
two_sample_occurrence_prop.test(setNR_Bact, setNR_Euka, p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit=0.05, print_all=TRUE)
two_sample_occurrence_fisher.test(setNR_Bact, setNR_Euka, p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
help(fisher.test)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length > 0)
setNR_Euka_nonzero = filter(setNR_Euka, length > 0)
View(setNR_Euka_nonzero)
View(setNR_Euka_nonzero)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact, setNR_Euka, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
summary(setNR_Bact)
summary(setNR_Bact_nonzero)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
View(setNR_Euka)
View(setNR_Euka)
# READ DATASETS
taxons = read.csv(full_path('domain_taxons_groups.tsv'), sep='\t', header = FALSE, col.names=c('Domain','TaxID','Group'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
setNR_Bact = filter(setNR, Group=='Bact')
setNR_Euka = filter(setNR, Group=='Euka')
View(setNR)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length > 0)
setNR_Euka_nonzero = filter(setNR_Euka, length > 0)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
q()
DATADIR = '/home/adam/Workspace/C#/SecStrAnnot2_data/SecStrAPI/testing_20200128-verbose'
source('R_lib.R')
dir.create(full_path('plots'), showWarnings = FALSE)
# READ DATASETS
taxons = read.csv(full_path('domain_taxons_groups.tsv'), sep='\t', header = FALSE, col.names=c('Domain','TaxID','Group'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
setNR_Bact = filter(setNR, Group=='Bact')
setNR_Euka = filter(setNR, Group=='Euka')
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group = Group, UniProt = UniProt, SetNR = Domain, SetALL_count = Count, SetALL = Domains) %>% arrange(Group)
write_tsv(domains_combined, full_path('plots/domain_lists_table.tsv'))
table((setNR %>% distinct(PDB, Group))$Group)
barplot(table((setNR %>% distinct(PDB, Group))$Group), main = 'Number of PDB entries in superkingdoms (Set-NR)')
View(domainsALL)
View(domainsALL)
View(domainsNR)
View(domains_combined)
View(setNR_Bact)
# PLOTS FOR OCCURRENCE
occurrence_table_NR = table_sse_occurrence(setNR, alpha = 0.05)
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, ignore_zero = TRUE, title = 'Set-NR')
# violinplot_sse(setNR, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse(setNR, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
# violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length > 0)
setNR_Euka_nonzero = filter(setNR_Euka, length > 0)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
q()
bNR = read_bulges_json_new(full_path('annotations_with_reference_residues_NR.json'), c('chain_id', 'start','end'))
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
DATADIR = '/home/adam/Workspace/C#/SecStrAnnot2_data/SecStrAPI/testing_20200128-verbose'
source('R_lib.R')
dir.create(full_path('plots'), showWarnings = FALSE)
bNR = read_bulges_json_new(full_path('annotations_with_reference_residues_NR.json'), c('chain_id', 'start','end'))
bNR = left_join(add_sse_lengths(bNR), taxons, by='Domain') %>% filter(label %in% OUR_SSES)
View(bNR)
View(bNR)
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
# READ DATASETS
taxons = read.csv(full_path('domain_taxons_groups.tsv'), sep='\t', header = FALSE, col.names=c('Domain','TaxID','Group'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
View(setNR)
View(setNR)
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES)
View(bulgesNR)
View(bulgesNR)
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% transmute(bulge_label = paste(label, type, sep = '.'))
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.'))
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.')) %>% keep_one_domain_per_pdb()
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.'))
bulgesALL = read_tsv(full_path('beta_bulges_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.'))# %>% keep_one_domain_per_pdb()
View(bulgesALL)
View(bulgesALL)
bulgesALL = read_tsv(full_path('beta_bulges_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.')) %>% keep_one_domain_per_pdb()
View(table_bulge_occurrence(setNR, bNR))
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
View(table_bulge_occurrence(setNR, bulgesNR))
View(bulgesNR)
View(bulgesNR)
View(bulgesNR)
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.')) %>% mutate(bulge = type)
View(bulgesNR)
View(bulgesNR)
View(table_bulge_occurrence(setNR, bulgesNR))
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
View(table_bulge_occurrence(setNR, bulgesNR))
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
View(table_bulge_occurrence(setNR, bulgesNR))
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.'))
bulgesALL = read_tsv(full_path('beta_bulges_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.')) %>% keep_one_domain_per_pdb()
View(table_bulge_occurrence(setNR, bulgesNR))
View(table_bulge_occurrence(setNR %>% filter(Group=='Bact'), bulgesNR %>% filter(Group=='Bact')))
View(table_bulge_occurrence(setNR %>% filter(Group=='Euka'), bulgesNR %>% filter(Group=='Euka')))
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha=0.05, title='Set-NR', include_parent_strands=FALSE)
View(setNR)
plot_sse_occurrence(bulgesNR)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha=0.05, title='Set-NR', include_parent_strands=FALSE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha=0.05, title='Set-NR', include_parent_strands=FALSE)
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = TRUE)
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = FALSE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = FALSE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = FALSE)
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = FALSE, stagger_labels = TRUE)
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = FALSE, turn_labels = TRUE)
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = FALSE, turn_labels = TRUE)
print_png(full_path('plots/bulge_occurrence-setNR.png'), width=4000, ratio=2/1, res=500)
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, include_parent_strands = FALSE, turn_labels = TRUE)
title = 'Set-NR',
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, title = 'Set-NR', include_parent_strands = FALSE, turn_labels = TRUE)
violinplot_sse(bulgesNR, 'length', ignore_zero = TRUE, title='Set-NR')
violinplot_sse(setNR, 'longest_G', ignore_zero = TRUE, title='Set-NR')
# HELIX TYPES
helices = setNR %>% filter(label %in% helix_order & length > 0)
# HELIX TYPES
helices = setNR %>% filter(label %in% HELIX_ORDER & length > 0)
# HELIX TYPES
helicesNR = setNR %>% filter(label %in% HELIX_ORDER & length > 0)
View(helicesNR)
plot_contained_helix_types(setNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(setNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(setNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(setNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(setNR, title='Contained helix types (Set-NR)', y_label='Fraction')
# HELIX TYPES
helicesNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% HELIX_ORDER & length > 0)
plot_contained_helix_types(setNR, title='Contained helix types (Set-NR)', y_label='Fraction')
View(helicesNR)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
View(helicesNR)
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
TRUE & FALSE
TRUE && FALSE
TRUE && TRUE
TRUE & TRUE
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction', turn_labels = TRUE)
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
print_png(full_path('plots/contained_types-setNR.png'), width = 4000, ratio = 2/1, res=500)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, title='Contained helix types (Set-NR)', y_label='Fraction')
plot_contained_helix_types(helicesNR, y_label = 'Fraction')
print_png(full_path('plots/contained_types-setNR.png'), width = 4000, ratio = 2/1, res = 500)
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, include_parent_strands = FALSE, turn_labels = TRUE)
print_png(full_path('plots/bulge_occurrence-setNR.png'), width=4000, ratio=2/1, res=500)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
plot_contained_helix_types(helicesNR, y_label = 'Fraction')
print_png(full_path('plots/contained_types-setNR.png'), width = 4000, ratio = 2/1, res = 500)
source('R_lib.R')
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05, turn_labels = TRUE)
source('~/Workspace/C#/SecStrAnnot2/scripts/R_lib.R')
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05, turn_labels = TRUE)
q()
source('secondary_structure_anatomy_lib.R')  # Contains a few CytochromeP450-specific constants!
getwd()
source('secondary_structure_anatomy_lib.R')  # Contains a few CytochromeP450-specific constants!
DATADIR = '/home/adam/Workspace/C#/SecStrAnnot2_data/SecStrAPI/testing_20200128-verbose'
# READ DATASETS
taxons = read.csv(full_path('domain_taxons_groups.tsv'), sep='\t', header = FALSE, col.names=c('Domain','TaxID','Group'))
setNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES)
setALL = read_tsv(full_path('annotations_with_reference_residues_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% select(-starts_with('longest_'), -starts_with('bonds_')) %>% filter(label %in% OUR_SSES) %>% keep_one_domain_per_pdb()
# ligands = read.csv(full_path('ligands.tsv'), sep='\t', header=FALSE, col.names=c('PDB','Ligands'))
dir.create(full_path('plots'), showWarnings = FALSE)
setNR_Bact = filter(setNR, Group=='Bact')
setNR_Euka = filter(setNR, Group=='Euka')
domainsNR = get_domains(setNR)
domainsALL = get_domains(setALL, summarize_by_UniProt = TRUE)
domains_combined = full_join(domainsNR, domainsALL, by = 'UniProt') %>% left_join(taxons) %>%
transmute(Group = Group, UniProt = UniProt, SetNR = Domain, SetALL_count = Count, SetALL = Domains) %>% arrange(Group)
write_tsv(domains_combined, full_path('plots/domain_lists_table.tsv'))
table((setNR %>% distinct(PDB, Group))$Group)
barplot(table((setNR %>% distinct(PDB, Group))$Group), main = 'Number of PDB entries in superkingdoms (Set-NR)')
# PLOTS FOR OCCURRENCE
occurrence_table_NR = table_sse_occurrence(setNR, alpha = 0.05)
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05, turn_labels = TRUE)
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
source('secondary_structure_anatomy_lib.R')  # Contains a few CytochromeP450-specific constants!
# PLOTS FOR OCCURRENCE
occurrence_table_NR = table_sse_occurrence(setNR, alpha = 0.05)
# plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05)
# print_png(full_path('plots/occurrence-setNR.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence(setNR, show_confidence = TRUE, alpha = 0.05, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka)
# print_png(full_path('plots/occurrence-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
plot_sse_occurrence_multi(Bact = setNR_Bact, Euka = setNR_Euka, turn_labels = TRUE)
print_png(full_path('plots/occurrence-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/occurrence-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# PLOTS FOR LENGTH DISTRIBUTION
boxplot_sse(setNR, ignore_zero = TRUE, title = 'Set-NR')
# violinplot_sse(setNR, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse(setNR, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE)
# print_png(full_path('plots/length-setNR-Bact-Euka.png'), width = 4000, ratio = 2/1, res = 400)
violinplot_sse_multi(Bact = setNR_Bact, Euka = setNR_Euka, ignore_zero = TRUE, turn_labels = TRUE)
print_png(full_path('plots/length-setNR-Bact-Euka-500t.png'), width = 4000, ratio = 2/1, res = 500)
print_tif(full_path('plots/length-setNR-Bact-Euka-500t.tif'), width = 4000, ratio = 2/1, res = 500)
# STATISTICAL COMPARISON Set-NR-Bact vs. Set-NR-Euka
setNR_Bact_nonzero = filter(setNR_Bact, length > 0)
setNR_Euka_nonzero = filter(setNR_Euka, length > 0)
two_sample_occurrence_prop_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_occurrence_fisher_test(setNR_Bact, setNR_Euka, p_limit = 0.05, print_all = TRUE)
two_sample_test_by_labels_with_comparison(ks.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE, reversed=TRUE)
two_sample_test_by_labels_with_comparison(wilcox.test, setNR_Bact_nonzero, setNR_Euka_nonzero, 'length', label_col='label', p_limit=0.05, print_all=TRUE)
# BETA-BULGES
bulgesNR = read_tsv(full_path('beta_bulges_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.'))
bulgesALL = read_tsv(full_path('beta_bulges_ALL.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% OUR_SSES) %>% mutate(bulge_label = paste(label, type, sep = '.')) %>% keep_one_domain_per_pdb()
View(table_bulge_occurrence(setNR, bulgesNR))
plot_bulge_occurrence(setNR, bulgesNR, show_confidence = TRUE, alpha = 0.05, include_parent_strands = FALSE, turn_labels = TRUE)
print_png(full_path('plots/bulge_occurrence-setNR.png'), width=4000, ratio=2/1, res=500)
# HELIX TYPES
helicesNR = read_tsv(full_path('annotations_with_reference_residues_NR.tsv')) %>%
left_join(taxons, by = 'Domain') %>% filter(label %in% HELIX_ORDER & length > 0)
plot_contained_helix_types(helicesNR, y_label = 'Fraction')
print_png(full_path('plots/contained_types-setNR.png'), width = 4000, ratio = 2/1, res = 500)
